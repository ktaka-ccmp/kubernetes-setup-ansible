# Usage:
#  ansible-playbook -i ./hosts ./node.yml -vv
#

- hosts: nodes
  sudo: yes

  vars_files:
  - vars.yml

  vars:
    kube_daemons: [ 'kubelet', 'proxy' ]
    other_daemons: [ 'flanneld', 'dockerd' ]
    packages: 
      - apt-transport-https
      - ca-certificates
      - bridge-utils
      - sudo
      - aptitude
      - libpam-systemd
      - tcpdump

  tasks:

  - copy: src=files/common/etc/hosts dest=/etc/hosts
  - template: src=files/common/etc/hostname dest=/etc/hostname

  - template: src=files/node/etc/apt/apt.conf dest=/etc/apt/apt.conf
  - apt: update_cache=yes

  - apt: pkg={{ item }} state=present
    with_items:
      - "{{ packages }}"

  - apt: upgrade=yes

########## PKI

  - local_action: file path={{ pki_dir }} state=directory

  - local_action: template src=files/pki/openssl.cnf dest={{ pki_dir }}/{{ ansible_default_ipv4.address }}.cnf
  - local_action: shell openssl genrsa -out {{ pki_dir }}/{{ ansible_default_ipv4.address }}.key 2048
  - local_action: shell openssl req -new -key {{ pki_dir }}/{{ ansible_default_ipv4.address }}.key -subj "/CN={{ ansible_default_ipv4.address }}" -out {{ pki_dir }}/{{ ansible_default_ipv4.address }}.csr -config {{ pki_dir }}/{{ ansible_default_ipv4.address }}.cnf
  - local_action: shell while ! (mkdir {{ lock_dir }} && openssl x509 -req -in {{ pki_dir }}/{{ ansible_default_ipv4.address }}.csr -CA {{ pki_dir }}/ca.crt -CAkey {{ pki_dir }}/ca.key -CAcreateserial -out {{ pki_dir }}/{{ ansible_default_ipv4.address }}.crt -days 10000  -extensions v3_req -extfile {{ pki_dir }}/{{ ansible_default_ipv4.address }}.cnf && rm -r {{ lock_dir }}) ; do sleep 1 ; done

  - file: path=/var/lib/kubelet/tls state=directory
  - template: src=./files/node/var/lib/kubelet/kubeconfig dest=/var/lib/kubelet/kubeconfig
  - copy: src={{ pki_dir }}/ca.crt dest=/var/lib/kubelet/tls/ca.crt mode=0700
  - copy: src={{ pki_dir }}/{{ ansible_default_ipv4.address }}.key dest=/var/lib/kubelet/tls/kubelet.key mode=0700
  - copy: src={{ pki_dir }}/{{ ansible_default_ipv4.address }}.crt dest=/var/lib/kubelet/tls/kubelet.crt mode=0700

####################### docker-engine

  - file: path=/etc/apt/sources.list.d/ state=directory mode=0755
  - template: src=files/common/etc/apt/sources.list.d/docker.list  dest=/etc/apt/sources.list.d/docker.list
  - shell: while ! apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --keyserver-option http-proxy=http://{{ hostvars[groups['masters'][0]]['ansible_default_ipv4']['address'] }}:8888 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D  ; do echo retrying ; sleep 1 ; done

  - apt: upgrade=yes update_cache=yes
  - apt: pkg=docker-engine state=present
  - service: name=docker state=stopped enabled=no
  - shell: /bin/systemctl mask docker
#  - shell: /sbin/ip link del dev docker0
#    ignore_errors: yes

########## 

  - unarchive: src=./files/common/usr/local/bin/{{ item }} dest=/usr/local/bin/ owner=root group=staff mode=0755
    with_items:
      - hyperkube.tar.xz
      - etcdctl.tar.xz
      - flanneld.tar.xz



  - file: src=hyperkube dest=/usr/local/bin/{{ item }} state=link
    with_items:
      - "{{ kube_daemons }}"

  - file: path=/usr/service/{{ item }}/log state=directory mode=0755
    with_items:
      - "{{ kube_daemons }}"
      - "{{ other_daemons }}"

  - template: src=./files/node/usr/service/{{ item }}/run dest=/usr/service/{{ item }}/run mode=0700
    with_items:
      - "{{ kube_daemons }}"
      - "{{ other_daemons }}"

  - template: src=./files/node/usr/service/{{ item }}/log/run dest=/usr/service/{{ item }}/log/run mode=0700
    with_items:
      - "{{ kube_daemons }}"
      - "{{ other_daemons }}"

  - file: path=/etc/service/ state=directory mode=0755
    with_items:
      - "{{ kube_daemons }}"
      - "{{ other_daemons }}"

  - file: src=/usr/service/{{ item }} dest=/etc/service/{{ item }} state=link
    with_items:
      - "{{ kube_daemons }}"
      - "{{ other_daemons }}"

  - apt: pkg={{ item }} state=present
    with_items:
      - daemontools-run

  - shell: 'svc -t /etc/service/* ; sleep 3'

  - copy: src=./files/node/etc/default/grub dest=/etc/default/grub 
    notify: update-grub

#  - copy: src=./files/node/etc/network/interfaces.d/cbr0 dest=/etc/network/interfaces.d/cbr0
#  - copy: src=./files/node/etc/network/interfaces dest=/etc/network/interfaces


  handlers:

  - name: update-grub
    shell: update-grub
    notify: restart-machine

  - name: restart-machine
    shell: sleep 2 && shutdown -r now "Ansible updates triggered"
    async: 1
    poll: 0
    ignore_errors: true
    changed_when: True
    notify: wait-server

  - name: wait-server
    local_action: wait_for host={{ inventory_hostname }} port=22 state=started delay=20 timeout=120

